{"version":3,"sources":["app/app.module.js","app/components/locale/locale.service.js","app/components/locale/locale.constants.js","app/components/language/languages.constants.js","app/components/language/language.service.js","app/components/bot/bot.service.js","app/blocks/handlers/settings.handler.js","app/blocks/config/translation-storage.provider.js","app/blocks/config/localstorage.config.js","app/blocks/config/ translation.config.js","app/settings/settings.state.js","app/settings/settings.service.js","app/settings/settings.controller.js","app/services/recast.service.js","app/services/mouth.service.js","app/services/microphone.service.js","app/services/hears.service.js","app/services/brain.js","app/services/bing-speech.service.js","app/home/home.state.js","app/home/home.controller.js","i18n/angular-locale_fr.js","i18n/angular-locale_en.js","app/app.state.js","app/app.constants.js","templateCacheHtml.js"],"names":["run","settingssHandler","initialize","angular","module","$inject","LocaleService","LOCALES","getAll","service","factory","constant","LanguageService","$q","$translate","LANGUAGES","tmhDynamicLocale","getCurrent","deferred","defer","language","storage","get","resolve","promise","changeLanguage","locale","languageKey","slice","use","set","Bot","$log","$rootScope","Hears","Brain","Mouth","name","$name","useName","startListening","isListening","stopListening","then","utterance","$emit","dialog","expression","speak","text","synthesize","Settings","Recast","BingSpeech","DEFAULTS","update","load","settingsSavedSuccess","$on","event","settings","isDefined","config","general","stt","tts","nlp","useLocale","useSpeechToText","useGender","gender","useTextToSpeech","useNaturalLanguageProcessor","useToken","token","useLanguage","useSubscriptionKey","subscriptionKey","translationStorageProvider","$cookies","indexOf","getObject","info","putObject","put","value","localStorageConfig","$localStorageProvider","$sessionStorageProvider","setKeyPrefix","translationConfig","$translateProvider","tmhDynamicLocaleProvider","useLoader","urlTemplate","preferredLanguage","useStorage","useSanitizeValueStrategy","addInterpolation","localeLocationPattern","useCookieStorage","storageKey","stateConfig","$stateProvider","state","parent","url","templateUrl","controller","controllerAs","translatePartialLoader","$translatePartialLoader","addPart","refresh","locales","$localStorage","save","Object","assign","defaults","reset","SettingsController","$state","vm","go","this","languages","sttEngines","ttsEngines","nlpEngines","genders","RecastProvider","$http","uuid4","$token","$language","Error","post","$recastApiUrl","message","type","content","conversation_id","conversationId","headers","Authorization","getJsonData","response","status","data","generate","$get","setRecastApiUrl","recastApiUrl","provider","$injector","$locale","debug","$gender","$tts","getTTSInstance","TextToSpeech","Microphone","$window","getAudioPermission","navigator","getUserMedia","audio","stream","error","reject","startRecording","recorder","RecordRTC","recorderType","StereoAudioRecorder","mimeType","numberOfAudioChannels","recording","stopRecording","getBlob","isRecording","webkitGetUserMedia","mozGetUserMedia","$stt","$audio","getSTTInstance","sst","recognize","SpeechToText","$nlp","getNLPInstance","NaturalLanguageProcessor","BingSpeechProvider","$subscriptionKey","getToken","$BingSpeechApiUrl","params","requestid","format","Content-Type","getSpeechResponse","font","$voices","ssml","$smmlTemplate","replace","responseType","Accept","X-Microsoft-OutputFormat","X-Search-AppId","X-Search-ClientID","speechResponse","RecognitionStatus","DisplayText","authenticationToken","tokenExpirationDate","Date","now","$issueTokenUrl","Ocp-Apim-Subscription-Key","storeToken","$defaultSubscriptionKey","ar-EG female","de-DE female","de-DE male","en-AU female","en-CA female","en-GB female","en-GB male","en-IN male","en-US female","en-US male","es-ES female","es-ES male","es-MX male","fr-CA female","fr-FR female","fr-FR male","it-IT male","ja-JP female","ja-JP male","pt-BR male","ru-RU female","ru-RU male","zh-CN female","zh-CN male","zh-HK female","zh-HK male","zh-TW female","zh-TW male","useDefaultSubscriptionKey","defaultSubscriptionKey","HomeController","$scope","hotkeys","welcomeMessage","handleBotResponse","handleConversationError","addBotMessage","values","getBotAudioUrl","audioUrl","messages","push","user","timestamp","getTime","image","list","elements","length","addUserMessage","toggleRecording","process","handleRecordingError","request","blob","Blob","URL","createObjectURL","results","forEach","conversation","memory","console","log","reply","submit","add","combo","description","instant","callback","$provide","PLURAL_CATEGORY","ZERO","ONE","TWO","FEW","MANY","OTHER","DATETIME_FORMATS","AMPMS","DAY","ERANAMES","ERAS","FIRSTDAYOFWEEK","MONTH","SHORTDAY","SHORTMONTH","STANDALONEMONTH","WEEKENDRANGE","fullDate","longDate","medium","mediumDate","mediumTime","short","shortDate","shortTime","NUMBER_FORMATS","CURRENCY_SYM","DECIMAL_SEP","GROUP_SEP","PATTERNS","gSize","lgSize","maxFrac","minFrac","minInt","negPre","negSuf","posPre","posSuf","id","localeID","pluralCat","n","opt_precision","i","getDecimals","getVF","v","undefined","Math","min","base","pow","f","vf","$urlRouterProvider","otherwise","abstract","template","$templateCache"],"mappings":"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","file":"../../scripts/app-811ae530f4.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular\n    .module('app', [\n      'ui.router',\n      'ui.bootstrap',\n      'ngStorage',\n      'ngCookies',\n      'uuid4',\n      'angularMoment',\n      'luegg.directives',\n      'ngCookies',\n      'tmh.dynamicLocale',\n      'pascalprecht.translate',\n      'cfp.hotkeys'\n    ]).run(run);\n\n  run.$inject = ['settingssHandler'];\n\n  function run(settingssHandler) {\n    settingssHandler.initialize();\n  }\n})();\n","(function () {\n  'use strict';\n  angular\n    .module('app')\n    .factory('LocaleService', LocaleService);\n\n  LocaleService.$inject = ['LOCALES'];\n\n  function LocaleService(LOCALES) {\n    var service = {\n      getAll: getAll\n    };\n\n    function getAll() {\n      return LOCALES;\n    }\n\n    return service;\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n\n    /*\n     Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n     They are written in English to avoid character encoding issues (not a perfect solution)\n     */\n    .constant('LOCALES', [\n      \"de-DE\",\n      \"es-ES\",\n      \"en-GB\",\n      \"en-US\",\n      \"fr-FR\",\n      \"it-IT\",\n      \"zh-CN\",\n      \"zh-TW\",\n      \"ja-JP\",\n      \"en-IN\",\n      \"pt-BR\",\n      \"ko-KR\",\n      \"fr-CA\",\n      \"en-AU\",\n      \"zh-HK\",\n      \"ar-EG\",\n      \"fi-FI\",\n      \"vpt-PT\",\n      \"en-NZ\",\n      \"pl-PL\",\n      \"en-CA\",\n      \"ru-RU\",\n      \"da-DK\",\n      \"nl-NL\",\n      \"ca-ES\",\n      \"nb-NO\",\n      \"es-MX\",\n      \"sv-SE\"\n    ]);\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n\n    /*\n     Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n     They are written in English to avoid character encoding issues (not a perfect solution)\n     */\n    .constant('LANGUAGES', [\n      'en',\n      'fr'\n    ]);\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .factory('LanguageService', LanguageService);\n\n  LanguageService.$inject = ['$q', '$translate', 'LANGUAGES', 'tmhDynamicLocale'];\n\n  function LanguageService($q, $translate, LANGUAGES, tmhDynamicLocale) {\n    var service = {\n      getAll: getAll,\n      getCurrent: getCurrent,\n      changeLanguage: changeLanguage\n    };\n\n    return service;\n\n    function getAll() {\n      return LANGUAGES;\n    }\n\n    function getCurrent() {\n      var deferred = $q.defer();\n      var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n      deferred.resolve(language);\n      return deferred.promise;\n    }\n\n    function changeLanguage(locale) {\n      var languageKey = locale.slice(0, 2);\n      if (languageKey) {\n        $translate.use(languageKey);\n        tmhDynamicLocale.set(languageKey);\n      }\n    }\n  }\n})();\n"," (function() {\n   'use strict';\n   angular\n     .module('app')\n     .factory('Bot', Bot);\n\n   Bot.$inject = ['$log', '$rootScope', 'Hears', 'Brain', 'Mouth'];\n\n   function Bot($log, $rootScope, Hears, Brain, Mouth) {\n     var service = {\n       startListening: startListening,\n       isListening: isListening,\n       stopListening: stopListening,\n       dialog: dialog,\n       speak: speak,\n       name: name,\n       useName: useName\n     };\n\n     var $name;\n\n     function name() {\n       return $name;\n     }\n\n     function useName(name) {\n       $name = name;\n     }\n\n     function startListening() {\n       Hears.startListening();\n     }\n\n     function isListening() {\n       return Hears.isListening();\n     }\n\n     function stopListening() {\n       return Hears.stopListening().then(function(utterance) {\n         $rootScope.$emit('bot:listened', utterance);\n         return utterance;\n       });\n     }\n\n     function dialog(expression) {\n       return Brain.dialog(expression);\n     }\n\n     function speak(text) {\n       return Mouth.synthesize(text);\n     }\n\n     return service;\n   }\n })();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .factory('settingssHandler', settingssHandler);\n\n  settingssHandler.$inject = ['$rootScope', 'Settings', 'Bot', 'Hears', 'Mouth', 'LanguageService', 'Brain', 'Recast', 'BingSpeech', 'DEFAULTS'];\n\n  function settingssHandler($rootScope, Settings, Bot, Hears, Mouth, LanguageService, Brain, Recast, BingSpeech, DEFAULTS) {\n    return {\n      initialize: initialize\n    };\n\n    function initialize() {\n      update(Settings.load());\n\n      var settingsSavedSuccess = $rootScope.$on('settings:saved', function (event, settings) {\n        update(settings);\n      });\n\n      $rootScope.$on('$destroy', function () {\n        if (angular.isDefined(settingsSavedSuccess) && settingsSavedSuccess !== null) {\n          settingsSavedSuccess();\n        }\n      });\n    }\n\n    function update(settings) {\n      var config = {\n        general: settings.general || DEFAULTS.general,\n        stt: settings.stt || DEFAULTS.stt,\n        tts: settings.tts || DEFAULTS.tts,\n        nlp: settings.nlp || DEFAULTS.nlp,\n        Recast: settings.Recast || DEFAULTS.Recast,\n        BingSpeech: settings.BingSpeech || DEFAULTS.BingSpeech\n      };\n      Bot.useName(config.general.name);\n      LanguageService.changeLanguage(config.general.language);\n      Hears.useLocale(config.stt.locale);\n      Hears.useSpeechToText(config.stt.service);\n      Mouth.useLocale(config.tts.locale);\n      Mouth.useGender(config.tts.gender);\n      Mouth.useTextToSpeech(config.tts.service);\n      Brain.useNaturalLanguageProcessor(config.nlp.service);\n      Recast.useToken(config.Recast.token);\n      Recast.useLanguage(config.Recast.language);\n      BingSpeech.useSubscriptionKey(config.BingSpeech.subscriptionKey);\n    }\n  }\n})();\n","(function () {\n  'use strict';\n  angular\n    .module('app')\n    .factory('translationStorageProvider', translationStorageProvider);\n\n  translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n  function translationStorageProvider($cookies, $log, LANGUAGES) {\n    return {\n      get: get,\n      put: put\n    };\n\n    function get(name) {\n      if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n        $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language \"en\"');\n        $cookies.putObject(name, 'en');\n      }\n      return $cookies.getObject(name);\n    }\n\n    function put(name, value) {\n      $cookies.putObject(name, value);\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .config(localStorageConfig);\n\n  localStorageConfig.$inject = ['$localStorageProvider', '$sessionStorageProvider'];\n\n  function localStorageConfig($localStorageProvider, $sessionStorageProvider) {\n    $localStorageProvider.setKeyPrefix('goldorak-');\n    $sessionStorageProvider.setKeyPrefix('goldorak-');\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .config(translationConfig);\n\n  translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n  function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n    // Initialize angular-translate\n    $translateProvider.useLoader('$translatePartialLoader', {\n      urlTemplate: 'i18n/{lang}/{part}.json'\n    });\n\n    $translateProvider.preferredLanguage('en');\n    $translateProvider.useStorage('translationStorageProvider');\n    $translateProvider.useSanitizeValueStrategy('escaped');\n    $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n    tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n    tmhDynamicLocaleProvider.useCookieStorage();\n    tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .config(stateConfig);\n\n  stateConfig.$inject = ['$stateProvider'];\n\n  function stateConfig($stateProvider) {\n    $stateProvider\n      .state('settings', {\n        parent: 'app',\n        url: '/settings',\n        templateUrl: 'app/settings/settings.html',\n        controller: 'SettingsController',\n        controllerAs: 'vm',\n        resolve: {\n          translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n            $translatePartialLoader.addPart('settings');\n            $translatePartialLoader.addPart('global');\n            return $translate.refresh();\n          }],\n          locales: ['LocaleService', function (LocaleService) {\n            return LocaleService.getAll();\n          }]\n        }\n      });\n  }\n})();\n","(function() {\n  'use strict';\n  angular\n    .module('app')\n    .factory('Settings', Settings);\n\n  Settings.$inject = ['$localStorage', '$log', '$rootScope', 'DEFAULTS'];\n\n  function Settings($localStorage, $log, $rootScope, DEFAULTS) {\n    var service = {\n      save: save,\n      load: load,\n      reset: reset\n    };\n\n    var defaults = DEFAULTS;\n\n    var settings = load();\n    if (!settings) {\n      save(defaults);\n    }\n\n    function save(settings) {\n      settings = Object.assign({}, defaults, settings);\n      $localStorage.settings = settings;\n      $rootScope.$emit('settings:saved', settings);\n    }\n\n    function load() {\n      return $localStorage.settings;\n    }\n\n    function reset() {\n      save(DEFAULTS);\n    }\n\n    return service;\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .controller('SettingsController', SettingsController);\n\n  SettingsController.$inject = ['$log', '$state', 'Settings', 'locales'];\n\n  function SettingsController($log, $state, Settings, locales) {\n    var vm = this;\n    vm.languages = ['en', 'fr'];\n    vm.sttEngines = [{\n      name: 'Microsoft BingSpeech',\n      service: 'BingSpeech'\n    }];\n    vm.ttsEngines = [{\n      name: 'Microsoft BingSpeech',\n      service: 'BingSpeech'\n    }];\n    vm.nlpEngines = [{\n      name: 'Recast',\n      service: 'Recast'\n    }];\n    vm.genders = ['female', 'male'];\n    vm.save = save;\n    vm.reset = reset;\n    vm.settings = Settings.load();\n    vm.locales = locales;\n\n    function save() {\n      Settings.save(vm.settings);\n      $state.go('home');\n    }\n\n    function reset() {\n      Settings.reset();\n      $state.go('home');\n    }\n  }\n})();\n","(function() {\n  'use strict';\n  angular\n    .module('app')\n    .provider('Recast', RecastProvider);\n\n    RecastProvider.$inject = [];\n\n  function RecastProvider() {\n    this.$get = Recast;\n\n    var $recastApiUrl = 'https://api.recast.ai/build/v1';\n\n    this.setRecastApiUrl = function (recastApiUrl) {\n      $recastApiUrl = recastApiUrl;\n    };\n\n    Recast.$inject = ['$http', '$log', '$rootScope', 'uuid4'];\n\n    function Recast($http, $log, $rootScope, uuid4) {\n      var service = {\n        useToken: useToken,\n        useLanguage: useLanguage,\n        dialog: dialog\n      };\n\n      var conversationId = uuid4.generate();\n      var $token;\n      var $language;\n      var $application;\n\n      function useToken(token) {\n        $token = token;\n      }\n\n      function useLanguage(language) {\n        $language = language;\n      }\n\n      function dialog(utterance) {\n        if (!$token) {\n          throw new Error('You must set the Token first');\n        }\n        return $http.post($recastApiUrl + '/dialog', {\n          message: {\n            type: 'text',\n            content: utterance,\n          },\n          language: $language,\n          conversation_id: conversationId\n        }, {\n          headers: {\n            'Authorization': 'Token ' + $token\n          }\n        }).then(getJsonData);\n      }\n\n      function getJsonData(response) {\n        if (response && response.status === 200) {\n          return response.data;\n        }\n        throw new Error(\"Natural Language Understanding failed\");\n      }\n\n      function descOrder(a, b) {\n        return b.score - a.score;\n      }\n\n      return service;\n    }\n  }\n})();\n","(function() {\n  'use strict';\n  angular\n    .module('app')\n    .factory('Mouth', Mouth);\n\n  Mouth.$inject = ['$injector', '$log', '$rootScope'];\n\n  function Mouth($injector, $log, $rootScope) {\n\n    var service = {\n      synthesize: synthesize,\n      useLocale: useLocale,\n      useGender: useGender,\n      useTextToSpeech: useTextToSpeech\n    };\n\n    var $locale;\n    var $gender;\n    var $tts;\n\n    function useLocale(locale) {\n      $locale = locale;\n      $log.debug('Text To Speech Locale: ' + $locale);\n    }\n\n    function useGender(gender) {\n      $gender = gender;\n      $log.debug('Text To Speech Gender: ' + $gender);\n    }\n\n    function useTextToSpeech(tts) {\n      $tts = tts;\n      $log.debug('Text To Speech Engine: ' + $tts);\n    }\n\n    function locale() {\n      return $locale;\n    }\n\n    function getTTSInstance() {\n      if ($tts) {\n        return $injector.get($tts);\n      }\n      throw new Error('You must define a TextToSpeech engine');\n    }\n\n    function synthesize(text) {\n      var TextToSpeech = getTTSInstance();\n      $rootScope.$emit('hears:onSynthesize', {\n        tts: $tts,\n        locale: $locale,\n        gender: $gender,\n        text: text\n      });\n      return TextToSpeech.synthesize(text, $locale, $gender);\n    }\n\n    return service;\n  }\n})();\n","(function () {\n  'use strict';\n  angular\n    .module('app')\n    .factory('Microphone', Microphone);\n\n  Microphone.$inject = ['$log', '$q', '$window'];\n\n  function Microphone($log, $q, $window) {\n    var service = {\n      startRecording: startRecording,\n      stopRecording: stopRecording,\n      isRecording: isRecording\n    };\n\n    $window.navigator.getUserMedia = $window.navigator.getUserMedia || $window.navigator.webkitGetUserMedia || $window.navigator.mozGetUserMedia;\n\n    function getAudioPermission() {\n      var deferred = $q.defer();\n      $window.navigator.getUserMedia({\n        audio: true\n      }, function (stream) {\n        deferred.resolve(stream);\n      }, function (error) {\n        deferred.reject(error);\n      });\n      return deferred.promise;\n    }\n\n    var recording = false;\n    var recorder;\n\n    function startRecording() {\n      getAudioPermission()\n        .then(function (stream) {\n          recorder = new RecordRTC(stream, {\n            recorderType: StereoAudioRecorder,\n            mimeType: 'audio/wav',\n            type: 'audio',\n            numberOfAudioChannels: 1\n          });\n          recorder.startRecording();\n          recording = true;\n        }).catch(function (error) {\n          $log.error(error);\n        });\n    }\n\n    function stopRecording() {\n      var deferred = $q.defer();\n      recorder.stopRecording(function () {\n        recording = false;\n        deferred.resolve(recorder.getBlob());\n      });\n      return deferred.promise;\n    }\n\n    function isRecording() {\n      return recording;\n    }\n\n    return service;\n  }\n})();\n","(function() {\n  'use strict';\n  angular\n    .module('app')\n    .factory('Hears', Hears);\n\n  Hears.$inject = ['$injector', '$log', '$rootScope', 'Microphone'];\n\n  function Hears($injector, $log, $rootScope, Microphone) {\n\n    var service = {\n      startListening: startListening,\n      isListening: Microphone.isRecording,\n      stopListening: stopListening,\n      locale: locale,\n      audio: audio,\n      useLocale: useLocale,\n      useSpeechToText: useSpeechToText\n    };\n\n    var $locale;\n    var $stt;\n    var $audio;\n\n    function useLocale(locale) {\n      $locale = locale;\n      $log.debug('Speech To Text Locale: ' + $locale);\n    }\n\n    function useSpeechToText(stt) {\n      $stt = stt;\n      $log.debug('Speech To Text Engine: ' + $stt);\n    }\n\n    function locale() {\n      return $locale;\n    }\n\n    function audio() {\n      return $audio;\n    }\n\n    function getSTTInstance() {\n      if ($stt) {\n        return $injector.get($stt);\n      }\n      throw new Error('You must define a SpeechToText engine');\n    }\n\n    function startListening() {\n      Microphone.startRecording();\n      $rootScope.$emit('hears:onStartListening', {\n        sst: $stt,\n        locale: $locale\n      });\n    }\n\n    function stopListening() {\n      $rootScope.$emit('hears:onStopListening', {\n        sst: $stt,\n        locale: $locale\n      });\n      return Microphone\n        .stopRecording()\n        .then(recognize);\n    }\n\n    function recognize(audio) {\n      $audio = audio;\n      var SpeechToText = getSTTInstance();\n      $rootScope.$emit('hears:onRecognize', {\n        sst: $stt,\n        locale: $locale,\n        audio: audio\n      });\n      return SpeechToText.recognize(audio, $locale);\n    }\n\n    return service;\n  }\n})();\n","(function () {\n  'use strict';\n  angular\n    .module('app')\n    .factory('Brain', Brain);\n\n  Brain.$inject = ['$injector', '$log', '$rootScope'];\n\n  function Brain($injector, $log, $rootScope) {\n    var service = {\n      dialog: dialog,\n      useNaturalLanguageProcessor: useNaturalLanguageProcessor\n    };\n\n    var $nlp;\n\n    function useNaturalLanguageProcessor(nlp) {\n      $nlp = nlp;\n      $log.debug('Natural Language Processor Engine: ' + $nlp);\n    }\n\n    function getNLPInstance() {\n      if ($nlp) {\n        return $injector.get($nlp);\n      }\n      throw new Error('You must define a NaturalLanguageProcessor engine');\n    }\n\n    function dialog(text) {\n      var NaturalLanguageProcessor = getNLPInstance();\n      $rootScope.$emit('brain:onProcess', {\n        nlp: $nlp,\n        text: text\n      });\n      return NaturalLanguageProcessor.dialog(text);\n    }\n\n    return service;\n  }\n})();\n","(function() {\n  'use strict';\n  angular\n    .module('app')\n    .provider('BingSpeech', BingSpeechProvider);\n\n  BingSpeechProvider.$inject = [];\n\n  function BingSpeechProvider() {\n    //Inspired by https://github.com/palmerabollo/bingspeech-api-client\n    this.$get = BingSpeech;\n\n    var $defaultSubscriptionKey;\n    var $BingSpeechApiUrl = 'https://speech.platform.bing.com';\n    var $issueTokenUrl = 'https://api.cognitive.microsoft.com/sts/v1.0/issueToken';\n\n    var $smmlTemplate = \"<speak version=\\\"1.0\\\" xml:lang=\\\"%LOCALE%\\\"> <voice name=\\\"%FONT%\\\" xml:lang=\\\"%LOCALE%\\\" xml:gender=\\\"%GENDER%\\\">%TEXT%</voice></speak>\";\n\n    var $voices = {\n      'ar-EG female': 'Microsoft Server Speech Text to Speech Voice (ar-EG, Hoda)',\n      'de-DE female': 'Microsoft Server Speech Text to Speech Voice (de-DE, Hedda)',\n      'de-DE male': 'Microsoft Server Speech Text to Speech Voice (de-DE, Stefan, Apollo)',\n      'en-AU female': 'Microsoft Server Speech Text to Speech Voice (en-AU, Catherine)',\n      'en-CA female': 'Microsoft Server Speech Text to Speech Voice (en-CA, Linda)',\n      'en-GB female': 'Microsoft Server Speech Text to Speech Voice (en-GB, Susan, Apollo)',\n      'en-GB male': 'Microsoft Server Speech Text to Speech Voice (en-GB, George, Apollo)',\n      'en-IN male': 'Microsoft Server Speech Text to Speech Voice (en-IN, Ravi, Apollo)',\n      'en-US female': 'Microsoft Server Speech Text to Speech Voice (en-US, ZiraRUS)',\n      'en-US male': 'Microsoft Server Speech Text to Speech Voice (en-US, BenjaminRUS)',\n      'es-ES female': 'Microsoft Server Speech Text to Speech Voice (es-ES, Laura, Apollo)',\n      'es-ES male': 'Microsoft Server Speech Text to Speech Voice (es-ES, Pablo, Apollo)',\n      'es-MX male': 'Microsoft Server Speech Text to Speech Voice (es-MX, Raul, Apollo)',\n      'fr-CA female': 'Microsoft Server Speech Text to Speech Voice (fr-CA, Caroline)',\n      'fr-FR female': 'Microsoft Server Speech Text to Speech Voice (fr-FR, Julie, Apollo)',\n      'fr-FR male': 'Microsoft Server Speech Text to Speech Voice (fr-FR, Paul, Apollo)',\n      'it-IT male': 'Microsoft Server Speech Text to Speech Voice (it-IT, Cosimo, Apollo)',\n      'ja-JP female': 'Microsoft Server Speech Text to Speech Voice (ja-JP, Ayumi, Apollo)',\n      'ja-JP male': 'Microsoft Server Speech Text to Speech Voice (ja-JP, Ichiro, Apollo)',\n      'pt-BR male': 'Microsoft Server Speech Text to Speech Voice (pt-BR, Daniel, Apollo)',\n      'ru-RU female': 'Microsoft Server Speech Text to Speech Voice (ru-RU, Irina, Apollo)',\n      'ru-RU male': 'Microsoft Server Speech Text to Speech Voice (ru-RU, Pavel, Apollo)',\n      'zh-CN female': 'Microsoft Server Speech Text to Speech Voice (zh-CN, Yaoyao, Apollo)',\n      'zh-CN male': 'Microsoft Server Speech Text to Speech Voice (zh-CN, Kangkang, Apollo)',\n      'zh-HK female': 'Microsoft Server Speech Text to Speech Voice (zh-HK, Tracy, Apollo)',\n      'zh-HK male': 'Microsoft Server Speech Text to Speech Voice (zh-HK, Danny, Apollo)',\n      'zh-TW female': 'Microsoft Server Speech Text to Speech Voice (zh-TW, Yating, Apollo)',\n      'zh-TW male': 'Microsoft Server Speech Text to Speech Voice (zh-TW, Zhiwei, Apollo)'\n    };\n\n    this.useDefaultSubscriptionKey = function(defaultSubscriptionKey) {\n      $defaultSubscriptionKey = defaultSubscriptionKey;\n    };\n\n    BingSpeech.$inject = ['$log', '$http', '$localStorage', '$q', 'uuid4'];\n\n    function BingSpeech($log, $http, $localStorage, $q, uuid4) {\n      var service = {\n        recognize: recognize,\n        synthesize: synthesize,\n        useSubscriptionKey: useSubscriptionKey\n      };\n\n      var $subscriptionKey;\n\n      function useSubscriptionKey(subscriptionKey) {\n        $subscriptionKey = subscriptionKey;\n      }\n\n      function recognize(audio, locale) {\n        if (!$subscriptionKey) {\n          throw new Error('You must set the subscriptionKey first');\n        }\n//        var foo = new Blob([audio], { type: 'audio/wav' });\n//        console.log(\"Audio: \" + foo.type);\n        $log.debug(\"Recognizing audio with locale: \" + locale);\n        return getToken($subscriptionKey).then(function(token) {\n            return $http.post($BingSpeechApiUrl + '/speech/recognition/interactive/cognitiveservices/v1', audio, {\n              params: {\n                'requestid': uuid4.generate(),\n                'format': 'simple',\n                'language': locale,\n              },\n              headers: {\n                'Authorization': 'Bearer ' + token,\n                'Content-Type': 'audio/wav; samplerate=44100'\n              }\n            });\n          })\n          .then(function(response) {\n            return getSpeechResponse(getJsonData(response));\n          });\n      }\n\n      function synthesize(text, locale, gender) {\n        if (!$subscriptionKey) {\n          throw new Error('You must set the subscriptionKey first');\n        }\n        var font = $voices[locale + \" \" + gender];\n        $log.debug(\"Synthetizing text \\\"\" + text + \"\\\" with locale: \" + locale + \", gender: \" + gender + \" and font: \" + font);\n        var ssml = $smmlTemplate\n          .replace(/%LOCALE%/gi, locale)\n          .replace(/%GENDER%/gi, gender)\n          .replace(/%FONT%/gi, font)\n          .replace(/%TEXT%/gi, text);\n        return getToken($subscriptionKey).then(function(token) {\n          return $http.post($BingSpeechApiUrl + '/synthesize', ssml, {\n            responseType: 'arraybuffer',\n            headers: {\n              'Accept': 'audio/basic',\n              'Authorization': 'Bearer ' + token,\n              'Content-Type': 'application/ssml+xml',\n              'X-Microsoft-OutputFormat': 'riff-8khz-8bit-mono-mulaw',\n              'X-Search-AppId': '07D3234E49CE426DAA29772419F436CA',\n              'X-Search-ClientID': '1ECFAE91408841A480F00935DC390960'\n            }\n          });\n        });\n      }\n\n      function getJsonData(response) {\n        if (response) {\n          return response.data;\n        }\n        throw new Error(\"Bing Speech recognition's reponse is empty\");\n      }\n\n      function getSpeechResponse(speechResponse) {\n        if (speechResponse.RecognitionStatus === \"Success\") {\n          return  speechResponse.DisplayText;\n        }\n        throw new Error(\"Speech recognition failed\");\n      }\n\n      function getToken(subscriptionKey) {\n        var deferred = $q.defer();\n        var token = $localStorage.authenticationToken;\n        var tokenExpirationDate = $localStorage.tokenExpirationDate;\n\n        if (token && tokenExpirationDate > Date.now()) {\n          deferred.resolve(token);\n        } else {\n          $http.post($issueTokenUrl, {}, {\n            headers: {\n              'Ocp-Apim-Subscription-Key': subscriptionKey\n            }\n          }).then(function(response) {\n            token = response.data;\n            storeToken(token);\n            deferred.resolve(token);\n          }).catch(function(error) {\n            $log.error(\"Unable to authenticate the request with subscription key: \" + subscriptionKey);\n            deferred.reject(error);\n          });\n        }\n        return deferred.promise;\n      }\n\n      function storeToken(token) {\n        $localStorage.authenticationToken = token;\n        //      Refresh access token every 9 minutes\n        $localStorage.tokenExpirationDate = Date.now() + 9 * 60 * 1000;\n      }\n\n      return service;\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .config(stateConfig);\n\n  stateConfig.$inject = ['$stateProvider'];\n\n  function stateConfig($stateProvider) {\n    $stateProvider\n      .state('home', {\n        parent: 'app',\n        url: '/',\n        templateUrl: 'app/home/home.html',\n        controller: 'HomeController',\n        controllerAs: 'vm',\n        resolve: {\n          translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n            $translatePartialLoader.addPart('talk');\n            $translatePartialLoader.addPart('home');\n            $translatePartialLoader.addPart('global');\n            $translatePartialLoader.addPart('speech/home');\n            $translatePartialLoader.addPart('speech/talk');\n            return $translate.refresh();\n          }]\n        }\n      });\n  }\n})();\n","(function() {\n  'use strict';\n\n  angular\n    .module('app')\n    .controller('HomeController', HomeController);\n\n  HomeController.$inject = ['$rootScope', '$scope', '$log', '$translate', '$q', 'hotkeys', 'Bot'];\n\n  function HomeController($rootScope, $scope, $log, $translate, $q, hotkeys, Bot) {\n    var vm = this;\n\n    vm.toggleRecording = toggleRecording;\n    vm.isRecording = Bot.isListening;\n    vm.submit = submit;\n    vm.messages = [];\n\n    hotkeys.add({\n      combo: 'ctrl+space',\n      description: $translate.instant('home.hotkey'),\n      callback: vm.toggleRecording\n    });\n\n    welcomeMessage();\n\n    function welcomeMessage() {\n      Bot.dialog('Bonjour')\n      .then(handleBotResponse)\n      .catch(handleConversationError);\n    }\n\n    function addBotMessage(message, values) {\n      if(message.type === 'text') {\n        getBotAudioUrl(message.content).then(function (audioUrl) {\n        vm.messages.push({\n          user: Bot.name(),\n          type: message.type,\n          timestamp: new Date().getTime(),\n          content: message.content,\n          values: values,\n          audio: audioUrl,\n          image: 'bot'\n        });\n      });\n      }\n      if(message.type === 'list') {\n        message.list = message.content;\n        message.content = 'Voici les ' + message.list.elements.length + ' propositions:';\n        getBotAudioUrl(message.content).then(function (audioUrl) {\n        vm.messages.push({\n          user: Bot.name(),\n          type: message.type,\n          timestamp: new Date().getTime(),\n          content: message.content,\n          list: message.list,\n          values: values,\n          audio: audioUrl,\n          image: 'bot'\n        });\n      });\n      }\n    }\n\n    function addUserMessage(message) {\n      vm.messages.push({\n        user: \"me\",\n        type: 'text',\n        timestamp: new Date().getTime(),\n        content: message,\n        image: 'me'\n      });\n    }\n\n    function toggleRecording() {\n      if (Bot.isListening()) {\n        Bot.stopListening().then(process).catch(handleRecordingError);\n      } else {\n        Bot.startListening();\n      }\n    }\n\n    function process(request) {\n      addUserMessage(request);\n\n      Bot.dialog(request)\n        .then(handleBotResponse)\n        .catch(handleConversationError);\n    }\n\n    function getBotTranslated(message, values) {\n      return $translate(\"speech.\" + message, values);\n    }\n\n    function getBotAudioUrl(text) {\n      var deferred = $q.defer();\n      Bot.speak(text).then(function(audio) {\n        var blob = new Blob([audio.data], {\n          type: \"audio/basic\"\n        });\n        deferred.resolve(URL.createObjectURL(blob));\n      });\n      return deferred.promise;\n    }\n\n    function handleBotResponse(response) {\n      response.results.messages.forEach(function(message) {\n        addBotMessage(message, response.results.conversation.memory);\n      });\n    }\n\n    function handleRecordingError(error) {\n      addBotMessage({\n        type: 'text',\n        content: 'Pardon, je ne suis pas sur de comprendre.'\n      }, {});\n    }\n\n    function handleConversationError(error) {\n      console.log('Home::handleConversationError %o', error);\n      addBotMessage(error.reply, error.data);\n    }\n\n    function submit() {\n      if (vm.text) {\n        process(vm.text);\n      }\n      vm.text = \"\";\n    }\n  }\n})();\n","'use strict';\nangular.module(\"ngLocale\", [], [\"$provide\", function($provide) {\nvar PLURAL_CATEGORY = {ZERO: \"zero\", ONE: \"one\", TWO: \"two\", FEW: \"few\", MANY: \"many\", OTHER: \"other\"};\n$provide.value(\"$locale\", {\n  \"DATETIME_FORMATS\": {\n    \"AMPMS\": [\n      \"AM\",\n      \"PM\"\n    ],\n    \"DAY\": [\n      \"dimanche\",\n      \"lundi\",\n      \"mardi\",\n      \"mercredi\",\n      \"jeudi\",\n      \"vendredi\",\n      \"samedi\"\n    ],\n    \"ERANAMES\": [\n      \"avant J\\u00e9sus-Christ\",\n      \"apr\\u00e8s J\\u00e9sus-Christ\"\n    ],\n    \"ERAS\": [\n      \"av. J.-C.\",\n      \"ap. J.-C.\"\n    ],\n    \"FIRSTDAYOFWEEK\": 0,\n    \"MONTH\": [\n      \"janvier\",\n      \"f\\u00e9vrier\",\n      \"mars\",\n      \"avril\",\n      \"mai\",\n      \"juin\",\n      \"juillet\",\n      \"ao\\u00fbt\",\n      \"septembre\",\n      \"octobre\",\n      \"novembre\",\n      \"d\\u00e9cembre\"\n    ],\n    \"SHORTDAY\": [\n      \"dim.\",\n      \"lun.\",\n      \"mar.\",\n      \"mer.\",\n      \"jeu.\",\n      \"ven.\",\n      \"sam.\"\n    ],\n    \"SHORTMONTH\": [\n      \"janv.\",\n      \"f\\u00e9vr.\",\n      \"mars\",\n      \"avr.\",\n      \"mai\",\n      \"juin\",\n      \"juil.\",\n      \"ao\\u00fbt\",\n      \"sept.\",\n      \"oct.\",\n      \"nov.\",\n      \"d\\u00e9c.\"\n    ],\n    \"STANDALONEMONTH\": [\n      \"Janvier\",\n      \"F\\u00e9vrier\",\n      \"Mars\",\n      \"Avril\",\n      \"Mai\",\n      \"Juin\",\n      \"Juillet\",\n      \"Ao\\u00fbt\",\n      \"Septembre\",\n      \"Octobre\",\n      \"Novembre\",\n      \"D\\u00e9cembre\"\n    ],\n    \"WEEKENDRANGE\": [\n      5,\n      6\n    ],\n    \"fullDate\": \"EEEE d MMMM y\",\n    \"longDate\": \"d MMMM y\",\n    \"medium\": \"d MMM y HH:mm:ss\",\n    \"mediumDate\": \"d MMM y\",\n    \"mediumTime\": \"HH:mm:ss\",\n    \"short\": \"dd/MM/y HH:mm\",\n    \"shortDate\": \"dd/MM/y\",\n    \"shortTime\": \"HH:mm\"\n  },\n  \"NUMBER_FORMATS\": {\n    \"CURRENCY_SYM\": \"\\u20ac\",\n    \"DECIMAL_SEP\": \",\",\n    \"GROUP_SEP\": \"\\u00a0\",\n    \"PATTERNS\": [\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 3,\n        \"minFrac\": 0,\n        \"minInt\": 1,\n        \"negPre\": \"-\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\",\n        \"posSuf\": \"\"\n      },\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 2,\n        \"minFrac\": 2,\n        \"minInt\": 1,\n        \"negPre\": \"-\",\n        \"negSuf\": \"\\u00a0\\u00a4\",\n        \"posPre\": \"\",\n        \"posSuf\": \"\\u00a0\\u00a4\"\n      }\n    ]\n  },\n  \"id\": \"fr\",\n  \"localeID\": \"fr\",\n  \"pluralCat\": function(n, opt_precision) {  var i = n | 0;  if (i == 0 || i == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}\n});\n}]);\n","'use strict';\nangular.module(\"ngLocale\", [], [\"$provide\", function($provide) {\nvar PLURAL_CATEGORY = {ZERO: \"zero\", ONE: \"one\", TWO: \"two\", FEW: \"few\", MANY: \"many\", OTHER: \"other\"};\nfunction getDecimals(n) {\n  n = n + '';\n  var i = n.indexOf('.');\n  return (i == -1) ? 0 : n.length - i - 1;\n}\n\nfunction getVF(n, opt_precision) {\n  var v = opt_precision;\n\n  if (undefined === v) {\n    v = Math.min(getDecimals(n), 3);\n  }\n\n  var base = Math.pow(10, v);\n  var f = ((n * base) | 0) % base;\n  return {v: v, f: f};\n}\n\n$provide.value(\"$locale\", {\n  \"DATETIME_FORMATS\": {\n    \"AMPMS\": [\n      \"AM\",\n      \"PM\"\n    ],\n    \"DAY\": [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ],\n    \"ERANAMES\": [\n      \"Before Christ\",\n      \"Anno Domini\"\n    ],\n    \"ERAS\": [\n      \"BC\",\n      \"AD\"\n    ],\n    \"FIRSTDAYOFWEEK\": 6,\n    \"MONTH\": [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ],\n    \"SHORTDAY\": [\n      \"Sun\",\n      \"Mon\",\n      \"Tue\",\n      \"Wed\",\n      \"Thu\",\n      \"Fri\",\n      \"Sat\"\n    ],\n    \"SHORTMONTH\": [\n      \"Jan\",\n      \"Feb\",\n      \"Mar\",\n      \"Apr\",\n      \"May\",\n      \"Jun\",\n      \"Jul\",\n      \"Aug\",\n      \"Sep\",\n      \"Oct\",\n      \"Nov\",\n      \"Dec\"\n    ],\n    \"STANDALONEMONTH\": [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ],\n    \"WEEKENDRANGE\": [\n      5,\n      6\n    ],\n    \"fullDate\": \"EEEE, MMMM d, y\",\n    \"longDate\": \"MMMM d, y\",\n    \"medium\": \"MMM d, y h:mm:ss a\",\n    \"mediumDate\": \"MMM d, y\",\n    \"mediumTime\": \"h:mm:ss a\",\n    \"short\": \"M/d/yy h:mm a\",\n    \"shortDate\": \"M/d/yy\",\n    \"shortTime\": \"h:mm a\"\n  },\n  \"NUMBER_FORMATS\": {\n    \"CURRENCY_SYM\": \"$\",\n    \"DECIMAL_SEP\": \".\",\n    \"GROUP_SEP\": \",\",\n    \"PATTERNS\": [\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 3,\n        \"minFrac\": 0,\n        \"minInt\": 1,\n        \"negPre\": \"-\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\",\n        \"posSuf\": \"\"\n      },\n      {\n        \"gSize\": 3,\n        \"lgSize\": 3,\n        \"maxFrac\": 2,\n        \"minFrac\": 2,\n        \"minInt\": 1,\n        \"negPre\": \"-\\u00a4\",\n        \"negSuf\": \"\",\n        \"posPre\": \"\\u00a4\",\n        \"posSuf\": \"\"\n      }\n    ]\n  },\n  \"id\": \"en\",\n  \"localeID\": \"en\",\n  \"pluralCat\": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}\n});\n}]);\n","(function () {\n  'use strict';\n\n  angular\n    .module('app')\n    .config(stateConfig);\n\n  stateConfig.$inject = ['$stateProvider', '$urlRouterProvider'];\n\n  function stateConfig($stateProvider, $urlRouterProvider) {\n\n    $urlRouterProvider.otherwise('/');\n    $stateProvider.state('app', {\n      abstract: true,\n      template: '<ui-view class=\"fill\"/>',\n      resolve: {\n        translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n          $translatePartialLoader.addPart('global');\n          return $translate.refresh();\n        }]\n      }\n    });\n  }\n})();\n","(function () {\n  'use strict';\n  angular\n    .module('app')\n    .constant('DEFAULTS', {\n      general: {\n        language: 'fr',\n        name: 'Sancho'\n      },\n      stt: {\n        name: 'Microsoft BingSpeech',\n        service: 'BingSpeech',\n        locale: 'fr-FR'\n      },\n      tts: {\n        name: 'Microsoft BingSpeech',\n        service: 'BingSpeech',\n        locale: 'fr-FR',\n        gender: 'female'\n      },\n      nlp: {\n        name: 'Recast',\n        service: 'Recast'\n      },\n      BingSpeech: {\n        subscriptionKey: '0bda007549194452bd2ead37a17de48e'\n      },\n      Recast: {\n        token: \"c3555e6e03cbf3af579aa9a1221ac53b\",\n        language: 'fr'\n      }\n    });\n})();\n","angular.module(\"app\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/home/home.html\",\"<div class=\\\"fill\\\">\\n\t<div class=\\\"container content mt-3\\\" scroll-glue>\\n\t\t<div class=\\\"row mb-2\\\" ng-repeat=\\\"message in vm.messages\\\">\\n\t\t\t<div class=\\\"col-3 col-sm-1\\\">\\n\t\t\t\t<img class=\\\"rounded img-fluid\\\" ng-src=\\\"content/images/{{message.image}}.png\\\">\\n\t\t\t</div>\\n\t\t\t<div class=\\\"col\\\">\\n\t\t\t\t<div class=\\\"card\\\" ng-class=\\\"message.user == \\'me\\' ? \\'card-outline-warning\\' : \\'card-outline-info\\'\\\">\\n\t\t\t\t\t<div class=\\\"card-block\\\">\\n\t\t\t\t\t\t<span class=\\\"card-title\\\"><strong class=\\\"capitalize\\\">{{message.user}}</strong></span>\\n            <span class=\\\"card-subtitle\\\"><small class=\\\"ml-1 text-muted\\\">{{message.timestamp | amDateFormat: \\'HH:mm\\'}}</small></span>\\n            <div ng-if=\\\"message.type == \\'text\\'\\\">\\n\t\t\t\t\t\t<p class=\\\"card-text\\\"> {{message.content}} </p>\\n            <audio ng-show=\\\"message.user != \\'me\\'\\\" src=\\\"{{message.audio}}\\\" autoplay></audio>\\n          </div>\\n          <div ng-if=\\\"message.type == \\'list\\'\\\">\\n              <p class=\\\"card-text\\\"> {{message.content}} </p>\\n              <audio ng-show=\\\"message.user != \\'me\\'\\\" src=\\\"{{message.audio}}\\\" autoplay></audio>\\n            <ul class=\\\"list-group\\\">\\n              <li class=\\\"list-group-item justify-content-between\\\" ng-repeat=\\\"element in message.list.elements\\\">\\n                <strong>{{element.title}}</strong>\\n                <span class=\\\"badge badge-default badge-pill\\\">{{element.subtitle}}</span>\\n                <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">{{element.buttons[0].title}}</button>\\n              </li>\\n            </ul>\\n          </div>\\n\t\t\t\t\t</div>\\n\t\t\t\t</div>\\n\t\t\t</div>\\n\t\t</div>\\n\t</div>\\n\\n\t<div class=\\\"container hidden-sm-down fixed-bottom mb-5\\\">\\n\t\t<div class=\\\"row\\\">\\n\t\t\t<div class=\\\"col\\\">\\n\t\t\t\t<form ng-submit=\\\"vm.submit()\\\">\\n\t\t\t\t\t<div class=\\\"input-group\\\">\\n\t\t\t\t\t\t<span class=\\\"input-group-btn\\\">\\n\t\t\t\t\t<button type=\\\"button\\\" ng-click=\\\"vm.toggleRecording()\\\" class=\\\"btn btn-lg\\\" ng-class=\\\"vm.isRecording() ? \\'btn-danger\\' : \\'btn-success\\'\\\">\\n\t\t\t\t\t\t<i class=\\\"fa fa-2x\\\" ng-class=\\\"vm.isRecording() ? \\'fa-microphone-slash\\' : \\'fa-microphone\\'\\\" aria-hidden=\\\"true\\\"></i>\\n\t\t\t</button>\\n\t\t\t\t</span>\\n\t\t\t\t\t\t<input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.text\\\" placeholder=\\\"{{ \\'home.form.placeholder\\' | translate }}\\\">\\n\t\t\t\t\t</div>\\n\t\t\t\t</form>\\n\t\t\t</div>\\n\t\t</div>\\n\t</div>\\n\\n\t<div class=\\\"hidden-sm-up fixed-bottom\\\">\\n\t\t<div class=\\\"row\\\">\\n\t\t\t<div class=\\\"col\\\">\\n\t\t\t\t<form ng-submit=\\\"vm.submit()\\\">\\n\t\t\t\t\t<div class=\\\"input-group\\\">\\n\t\t\t\t\t\t<span class=\\\"input-group-btn\\\">\\n\t\t\t\t\t<button type=\\\"button\\\" ng-click=\\\"vm.toggleRecording()\\\" class=\\\"btn no-rounded\\\" ng-class=\\\"vm.isRecording() ? \\'btn-danger\\' : \\'btn-success\\'\\\">\\n\t\t\t\t\t\t<i class=\\\"fa fa-2x\\\" ng-class=\\\"vm.isRecording() ? \\'fa-microphone-slash\\' : \\'fa-microphone\\'\\\" aria-hidden=\\\"true\\\"></i>\\n\t\t\t</button>\\n\t\t\t\t</span>\\n\t\t\t\t\t\t<input type=\\\"text\\\" class=\\\"form-control no-rounded\\\" ng-model=\\\"vm.text\\\" placeholder=\\\"{{ \\'home.form.placeholder\\' | translate }}\\\">\\n\t\t\t\t\t</div>\\n\t\t\t\t</form>\\n\t\t\t</div>\\n\t\t</div>\\n\t</div>\\n\\n\\n</div>\\n\");\n$templateCache.put(\"app/settings/settings.html\",\"<div class=\\\"container mt-3\\\">\\n  <form>\\n\\n    <h4 class=\\\"text-primary\\\" translate=\\\"settings.general.title\\\">General</h4>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"name\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.general.name\\\">Bot Name</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <input class=\\\"form-control\\\" type=\\\"text\\\" ng-model=\\\"vm.settings.general.name\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"language\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.general.language\\\">Language</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.general.language\\\" ng-options=\\\"it for it in vm.languages track by it\\\"></select>\\n      </div>\\n    </div>\\n\\n    <h4 class=\\\"text-primary\\\" translate=\\\"settings.stt.title\\\">Speech To Text</h4>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"stt_locale\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.locale\\\">Locale</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.stt.locale\\\" ng-options=\\\"it for it in vm.locales track by it\\\"></select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"sst_engine\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.engine\\\">Engine</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.stt\\\" ng-options=\\\"it.name for it in vm.sttEngines track by it.name\\\"></select>\\n      </div>\\n    </div>\\n    <h5>Microsoft BingSpeech</h5>\\n    <fieldset>\\n      <div class=\\\"form-group row\\\">\\n        <label for=\\\"BingSpeech_subscription_key\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.BingSpeech.subscriptionKey\\\">Subscription Key</label>\\n        <div class=\\\"col-sm-10\\\">\\n          <input readonly=\\\"readonly\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"BingSpeech_subscription_key\\\" placeholder=\\\"The BingSpeech Subscription Key to use\\\" ng-model=\\\"vm.settings.BingSpeech.subscriptionKey\\\">\\n        </div>\\n      </div>\\n    </fieldset>\\n\\n    <h4 class=\\\"text-primary\\\" translate=\\\"settings.tts.title\\\">Text To Speech</h4>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"tts_locale\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.locale\\\">Locale</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.tts.locale\\\" ng-options=\\\"it for it in vm.locales track by it\\\"></select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"tts_gender\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.tts.gender\\\">Gender</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.tts.gender\\\">\\n          <option value=\\\"female\\\" translate=\\\"global.gender.female\\\">Female</option>\\n          <option value=\\\"male\\\" translate=\\\"global.gender.male\\\">Male</option>\\n        </select>\\n      </div>\\n    </div>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"tts_engine\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.engine\\\">Engine</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.tts\\\" ng-options=\\\"it.name for it in vm.ttsEngines track by it.name\\\"></select>\\n      </div>\\n    </div>\\n    <h5>Microsoft BingSpeech</h5>\\n    <fieldset disabled=\\\"disabled\\\">\\n      <div class=\\\"form-group row\\\">\\n        <label for=\\\"BingSpeech_subscription_key\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.BingSpeech.subscriptionKey\\\">Subscription Key</label>\\n        <div class=\\\"col-sm-10\\\">\\n          <input readonly=\\\"readonly\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"BingSpeech_subscription_key\\\" placeholder=\\\"The BingSpeech Subscription Key to use\\\" ng-model=\\\"vm.settings.BingSpeech.subscriptionKey\\\">\\n        </div>\\n      </div>\\n    </fieldset>\\n\\n    <h4 class=\\\"text-primary\\\" translate=\\\"settings.nlp.title\\\">Natural Language Processor</h4>\\n    <div class=\\\"form-group row\\\">\\n      <label for=\\\"nlp_engine\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.nlp.engine\\\">Engine</label>\\n      <div class=\\\"col-sm-10\\\">\\n        <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.nlp\\\" ng-options=\\\"it.name for it in vm.nlpEngines track by it.name\\\"></select>\\n      </div>\\n    </div>\\n    <h5>Recast</h5>\\n    <fieldset>\\n      <div class=\\\"form-group row\\\">\\n        <label for=\\\"recast_subscription_key\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.Recast.subscriptionKey\\\">Subscription Key</label>\\n        <div class=\\\"col-sm-10\\\">\\n          <input readonly=\\\"readonly\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"recast_subscription_key\\\" placeholder=\\\"The Recast Subscription Key to use\\\" ng-model=\\\"vm.settings.Recast.token\\\">\\n        </div>\\n      </div>\\n      <div class=\\\"form-group row\\\">\\n          <label for=\\\"language\\\" class=\\\"col-sm-2 col-form-label\\\" translate=\\\"settings.general.language\\\">Language</label>\\n          <div class=\\\"col-sm-10\\\">\\n            <select class=\\\"form-control\\\" ng-model=\\\"vm.settings.Recast.language\\\" ng-options=\\\"it for it in vm.languages track by it\\\"></select>\\n          </div>\\n        </div>\\n    </fieldset>\\n\\n    <div class=\\\"form-group row\\\">\\n      <div class=\\\"offset-sm-2 col-sm-10 text-right\\\">\\n        <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\" ng-click=\\\"vm.reset()\\\"><i class=\\\"fa fa-times-circle\\\" aria-hidden=\\\"true\\\"></i>&nbsp;<span translate=\\\"settings.reset\\\">Reset</span></button>\\n        <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.save()\\\"><i class=\\\"fa fa-floppy-o\\\" aria-hidden=\\\"true\\\"></i>&nbsp;<span translate=\\\"settings.save\\\">Save</span></button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\\n\");}]);"]}